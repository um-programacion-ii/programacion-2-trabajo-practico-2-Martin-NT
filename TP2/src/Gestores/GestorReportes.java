package Gestores;
import Excepciones.RecursoNoDisponibleException;
import Interfaces.RecursoDigital;
import Prestamos.Prestamo;
import Usuarios.Usuario;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
 * Clase responsable de generar reportes y estad√≠sticas
 * a partir de los datos de pr√©stamos, usuarios y recursos.
 */
public class GestorReportes {
    // Dependencias de los gestores
    private final GestorPrestamos gestorPrestamos;
    private final GestorUsuarios gestorUsuarios;
    private final GestorRecursos gestorRecursos;

    //Constructor que recibe las colecciones necesarias para generar reportes.
    public GestorReportes(GestorPrestamos gestorPrestamos, GestorUsuarios gestorUsuarios, GestorRecursos gestorRecursos) {
        this.gestorPrestamos = gestorPrestamos;
        this.gestorUsuarios = gestorUsuarios;
        this.gestorRecursos = gestorRecursos;
    }

    // Mostrar recursos m√°s prestados
    public void mostrarRecursosMasPrestados() {
        System.out.println("\nüìö Recursos m√°s prestados:");

        // Agrupa los pr√©stamos por ID de recurso y los cuenta
        Map<String, Long> conteo = gestorPrestamos.getPrestamos().stream()
                .collect(Collectors.groupingBy(p -> p.getRecurso().getId(), Collectors.counting()));

        // Ordena de mayor a menor y muestra todos los recursos prestados
        conteo.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .forEach(entry -> {
                    try {
                        RecursoDigital recurso = gestorRecursos.obtenerRecursoPorId(entry.getKey());
                        if (recurso != null) {
                            System.out.println("üî∏ " + recurso.getTitulo() + " - " + entry.getValue() + " pr√©stamo(s) - Categor√≠a: " + recurso.getCategoria().name());
                        }
                    } catch (RecursoNoDisponibleException e) {
                        System.out.println("Error al obtener recurso con ID " + entry.getKey() + ": " + e.getMessage());
                    }
                });
    }

    // Muestra los usuarios m√°s activos (los que m√°s pr√©stamos realizaron)
    public void mostrarUsuariosMasActivos() {
        System.out.println("\nüë• Usuarios m√°s activos:");

        // Agrupa los pr√©stamos por ID de usuario y los cuenta
        Map<String, Long> conteo = gestorPrestamos.getPrestamos().stream()
                .collect(Collectors.groupingBy(p -> p.getUsuario().getId(), Collectors.counting()));

        // Ordena de mayor a menor y muestra los 5 m√°s activos
        conteo.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .limit(5)
                .forEach(entry -> {
                    Usuario usuario = gestorUsuarios.getUsuarios().get(entry.getKey());
                    if (usuario != null) {
                        System.out.println("üë§ " + usuario.getNombre() + " " + usuario.getApellido() + " - " + entry.getValue() + " pr√©stamos");
                    }
                });
    }

    // Muestra estad√≠sticas de pr√©stamos agrupadas por categor√≠a del recurso.
    public void mostrarEstadisticasPorCategoria() {
        System.out.println("\nüìà Estad√≠sticas por categor√≠a de recurso:");

        // Agrupa los pr√©stamos por categor√≠a de recurso y los cuenta
        Map<String, Long> conteo = gestorPrestamos.getPrestamos().stream()
                .collect(Collectors.groupingBy(p -> p.getRecurso().getCategoria().name(), Collectors.counting()));

        // Muestra las estad√≠sticas de pr√©stamos por categor√≠a
        conteo.forEach((categoria, cantidad) ->
                System.out.println("üìå " + categoria + ": " + cantidad + " pr√©stamos"));
    }
}

